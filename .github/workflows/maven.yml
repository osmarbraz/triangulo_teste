# Nome do workflow no repositório
name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  # Jobs do ambiente
  build:
    # Runner com uma instância da matriz
    runs-on: ${{ matrix.os }}      
    # Nome do Job no workflow
    name: build - SO ${{ matrix.os }} e JDK ${{matrix.java}}... 
    # Prepara diversas versões do SO e do Java
    strategy:
      fail-fast: false
      matrix:        
        os: [ubuntu-latest, macos-latest]  
        #os: [windows-latest]  
        java: [16, 17, 18]   
        #java: [18]      
    steps:
      # Utiliza a action checkout para fazer o git clone no runner  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      # Utiliza a action setup-java para configurar a versão necessária do JDK
      - name: Configurando o JDK ${{matrix.java}}... 
        uses: actions/setup-java@v1        
        with:
          java-version: ${{matrix.java}}
      - name: Cache dos pacotes do SonarCloud
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      # Configura um cache as dependências do projeto, isso vai permitir 
      # que as próximas execuções do workflow sejam mais rápidas visto 
      # que as dependências já estarão disponibilizadas para o runner
      - name: Cache dos pacotes do Maven
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Executa a verificação do projeto com o Maven no runner    
      - name: Verificando o código
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}        
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=osmarbraz_triangulo_teste 